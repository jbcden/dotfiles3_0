set nocompatible
set relativenumber
set number
set hidden
lang en_US.UTF-8

set laststatus=2  " Always display the status line
set showcmd " display incomplete commands
set nowrap
set nobackup
set nowritebackup
set noswapfile " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287
set history=1000
set expandtab
set tabstop=2 shiftwidth=2 softtabstop=2
set autoindent
set omnifunc=syntaxcomplete#Complete
set exrc
set secure " disable unsafe commands in local vimrcs
set hlsearch
set ruler

let mapleader = "\<Space>"

" Easy jump back to last open file
nnoremap ,, <c-^>

" I like to keep lines less than 80 characters
set colorcolumn=80

" These are neovim specific configurations
" set inccommand=nosplit
" set undodir=~/.vim/undodir

set backspace=2

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Display extra whitespace
set list listchars=tab:»·,trail:·

" Enable Matchit
runtime macros/matchit.vim

filetype plugin indent on

set packpath^=~/.vim
packadd minpac
call minpac#init()

call minpac#add('k-takata/minpac', {'type': 'opt'})
" TODO: Add install instructions for deoplete -- required python3 and
" additional python packages.
call minpac#add('Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' })
call minpac#add('neomake/neomake')
call minpac#add('tpope/vim-surround')
call minpac#add('tpope/vim-fugitive')
call minpac#add('tpope/vim-unimpaired')
call minpac#add('ctrlpvim/ctrlp.vim')
call minpac#add('sbdchd/neoformat')
call minpac#add('ngmy/vim-rubocop')
call minpac#add('kana/vim-textobj-user')
call minpac#add('racer-rust/vim-racer')
call minpac#add('slim-template/vim-slim')
call minpac#add('jparise/vim-graphql')
" Additional colorschemes
call minpac#add('dikiaap/minimalist')
call minpac#add('endel/vim-github-colorscheme')
" Language server implementation for vim -- requires a bit more advanced setup
" and customization
" call minpac#add('autozimu/LanguageClient-neovim', { 'branch': 'next', 'do': 'bash install.sh' })

syntax enable
set background=light
colorscheme morning

" Settings for a dark theme
" set background=dark
"  colorscheme minimalist

let g:deoplete#enable_at_startup = 1

" let g:LanguageClient_serverCommands = {
"     \ 'ruby': ['~/.rbenv/shims/solargraph', 'stdio'],
"     \ }
" 
" nnoremap <F5> :call LanguageClient_contextMenu()<CR>
" " Or map each action separately
" nnoremap <leader>kj :call LanguageClient#textDocument_hover()<CR>
" nnoremap <leader>j :call LanguageClient#textDocument_definition()<CR>
" nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>

" Neomake
" disable Neomake checks for Java -- this currently isn't setup correctly and
" causes vim to hang for a while.
let blacklist = ['java']
highlight NeomakeWarning ctermfg=227 ctermbg=237
autocmd! BufWritePost * if index(blacklist, &ft) < 0 | Neomake

" This allows vim to remember the line you were last on when you reopen a
" file. You can read a bit more about this at:
" https://askubuntu.com/questions/202075/how-do-i-get-vim-to-remember-the-line-i-was-on-when-i-reopen-a-file#202077
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

" Use the silver searcher `ag` for vim grep and ctrl-p. Much faster than the
" default for large projects
if executable("ag")
  set grepprg=ag\ --nogroup\ --nocolor
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  let g:ctrlp_use_caching = 0
endif

" Same as above but uses `rg` -- can be much faster than `ag` in certain
" cases.
" if executable("rg")
"   set grepprg=rg\ --vimgrep\ --no-heading\ -i
"   set grepformat=%f:%l:%c:%m,%f:%l:%m
"   let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
"   let g:ctrlp_use_caching = 0
" endif

let g:rspec_command = 'Dispatch rspec {spec}'

hi StatusLine ctermbg=lightgreen ctermfg=grey

" vim-rspec setup
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>


" Clear search highlighting
nmap <leader>h :let @/=''<CR>

" Sane navigation for wrapped lines
nmap j gj
nmap k gk

nmap 0 ^

nmap <leader>vi :tabe $MYVIMRC<cr>
nmap <leader>so :source $MYVIMRC<cr>

" Map original '0' behavior to <leader>0
nmap <leader>0 <HOME>

autocmd Filetype help nmap <buffer> q :q<CR>

" Automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =
" Zoom a vim split
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

" Fixups with Fugitive
map <space>l :Git! log<cr>gg

command! PackInitInstall packadd minpac | source $MYVIMRC | call minpac#update('', {'do': 'qa'})
