set nocompatible
set relativenumber
set number
set hidden
lang en_US.UTF-8

set laststatus=2  " Always display the status line
set showcmd " display incomplete commands
set nowrap
set nobackup
set nowritebackup
set noswapfile " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287
set history=1000
set expandtab
set tabstop=2 shiftwidth=2 softtabstop=2
set autoindent
set omnifunc=syntaxcomplete#Complete
set exrc
set secure " disable unsafe commands in local vimrcs
set hlsearch
set ruler

" NOTE: new language server suggested settings -- experimental
set cmdheight=2
set updatetime=300
set shortmess+=c
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

autocmd BufWritePre   *.rs call CocAction('format')


" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

let mapleader = "\<Space>"

" Easy jump back to last open file
nnoremap ,, <c-^>

" I like to keep lines less than 80 characters
set colorcolumn=80

set inccommand=nosplit
set undodir=~/.vim/undodir

set backspace=2

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Display extra whitespace
set list listchars=tab:»·,trail:·

" Enable Matchit
runtime macros/matchit.vim

filetype plugin indent on

let g:go_def_mode='gopls'
let g:go_info_mode='gopls'

set packpath^=~/.vim
packadd minpac
call minpac#init()

call minpac#add('k-takata/minpac', {'type': 'opt'})
" TODO: Add install instructions for deoplete -- required python3 and
" additional python packages.
call minpac#add('Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' })
call minpac#add('neomake/neomake')
call minpac#add('tpope/vim-surround')
call minpac#add('tpope/vim-repeat')
call minpac#add('tpope/vim-fugitive')
call minpac#add('tpope/vim-unimpaired')
call minpac#add('ctrlpvim/ctrlp.vim')
call minpac#add('sbdchd/neoformat')
call minpac#add('ngmy/vim-rubocop')
call minpac#add('kana/vim-textobj-user')
call minpac#add('rust-lang/rust.vim')
call minpac#add('racer-rust/vim-racer')
call minpac#add('ElmCast/elm-vim')
call minpac#add('slim-template/vim-slim')
call minpac#add('neoclide/coc.nvim', { 'branch': 'release' })
call minpac#add('jparise/vim-graphql')
" Additional colorschemes
call minpac#add('dikiaap/minimalist')
call minpac#add('endel/vim-github-colorscheme')
call minpac#add('fatih/vim-go')

syntax enable
" set background=light
" colorscheme morning

" Settings for a dark theme
set background=dark
colorscheme minimalist

let g:deoplete#enable_at_startup = 1

" Neomake
" disable Neomake checks for Java -- this currently isn't setup correctly and
" causes vim to hang for a while.
let blacklist = ['java']
highlight NeomakeWarning ctermfg=227 ctermbg=237
autocmd! BufWritePost * if index(blacklist, &ft) < 0 | Neomake

" This allows vim to remember the line you were last on when you reopen a
" file. You can read a bit more about this at:
" https://askubuntu.com/questions/202075/how-do-i-get-vim-to-remember-the-line-i-was-on-when-i-reopen-a-file#202077
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

" Use the silver searcher `ag` for vim grep and ctrl-p. Much faster than the
" default for large projects
" if executable("ag")
"   set grepprg=ag\ --nogroup\ --nocolor
"   let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
"   let g:ctrlp_use_caching = 0
" endif

" Same as above but uses `rg` -- can be much faster than `ag` in certain
" cases.
if executable("rg")
  set grepprg=rg\ --vimgrep\ --no-heading\ -i
  set grepformat=%f:%l:%c:%m,%f:%l:%m
  let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
  let g:ctrlp_use_caching = 0
endif

let g:rspec_command = 'Dispatch rspec {spec}'

hi StatusLine ctermbg=lightgreen ctermfg=grey

" vim-rspec setup
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>


" Clear search highlighting
nmap <leader>h :let @/=''<CR>

" Sane navigation for wrapped lines
nmap j gj
nmap k gk

nmap 0 ^

nmap <leader>vi :tabe $MYVIMRC<cr>
nmap <leader>so :source $MYVIMRC<cr>

" Map original '0' behavior to <leader>0
nmap <leader>0 <HOME>

autocmd FileType gitcommit :set spell

autocmd Filetype help nmap <buffer> q :q<CR>

" Automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =
" Zoom a vim split
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

" Fixups with Fugitive
map <space>l :Git! log<cr>gg
nnoremap <c-F> yiw <ESC>:Git commit --fixup=<c-r>"<cr>


function! CamelcaseToSnakecase(str)
  let l:snake_case = substitute(a:str, '\(\<\u\l\+\|\l\+\)\(\u\)', '\l\1_\l\2', 'g')
  return substitute(snake_case, '[A-Z]', '\L&', 'g')
endfunction

function! CompileElmToJavascript()
  let l:snakecase_filename = CamelcaseToSnakecase(expand('%:r'))
  let l:compiled_filename = snakecase_filename . '.js'
  execute '!elm-make ' . expand('%') . ' --output ' . compiled_filename
endfunction

function! CompileElmToHtml()
  let l:snakecase_filename = CamelcaseToSnakecase(expand('%:r'))
  let l:compiled_filename = snakecase_filename . '.html'
  execute '!elm-make ' . expand('%') . ' --output ' . compiled_filename
endfunction

" Elm
au FileType elm nmap <leader>cj :call CompileElmToJavascript()<CR>
au FileType elm nmap <leader>ch :call CompileElmToHtml()<CR>

command! PackInitInstall packadd minpac | source $MYVIMRC | call minpac#update('', {'do': 'qa'})
