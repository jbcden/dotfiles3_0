# Basic ubuntu bashrc with some addons based on examples from: "From Bash to Zshell".

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# prevent unmatched patterns being passed to commands -- see bash to zshell p. 208
# somehow disables tab completion...
# shopt -s nullglob

HISTFILE=~/.bash_history
HISTSIZE=1000
HISTFILESIZE=2000

[ -f /usr/local/etc/bash_completion ] && source /usr/local/etc/bash_completion
[ -f /usr/local/etc/profile.d/bash_completion.sh ] && source /usr/local/etc/profile.d/bash_completion.sh
[ -f /Library/Developer/CommandLineTools/usr/share/git-core/git-completion.bash ] && source /Library/Developer/CommandLineTools/usr/share/git-core/git-completion.bash
[ -f /usr/share/bash-completion/completions/git ] && source /usr/share/bash-completion/completions/git

# This is for macos Catalina upgrade
if command -v brew 2&> /dev/null; then
  for file in $(brew --prefix)/etc/bash_completion.d/*
  do
    source $file
  done
fi

# Use bash-completion, if available
[[ $PS1 && -f /usr/share/bash-completion/bash_completion ]] && \
      source /usr/share/bash-completion/bash_completion

# get current branch in git repo
function parse_git_branch() {
BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
if [ ! "${BRANCH}" == "" ]
then
  STAT=`parse_git_dirty`
  echo "[${BRANCH}${STAT}]"
else
  echo ""
fi
}

# get current status of git repo
function parse_git_dirty {
status=`git status 2>&1 | tee`
dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
bits=''
if [ "${renamed}" == "0" ]; then
  bits=">${bits}"
fi
if [ "${ahead}" == "0" ]; then
  bits="*${bits}"
fi
if [ "${newfile}" == "0" ]; then
  bits="+${bits}"
fi
if [ "${untracked}" == "0" ]; then
  bits="?${bits}"
fi
if [ "${deleted}" == "0" ]; then
  bits="x${bits}"
fi
if [ "${dirty}" == "0" ]; then
  bits="!${bits}"
fi
if [ ! "${bits}" == "" ]; then
  echo " ${bits}"
else
  echo ""
fi
}

export PS1="\[\e[0;31m\]\w:\[\e[m\]\[\e[0;36m\]\`parse_git_branch\`\[\e[m\]\n"

# If you use neovim this will be different. I like to use the normal vim
# location so I override this option.
export MYVIMRC=~/.vimrc

# have history not save consecutive duplicate or lines starting with whitespace.
HISTCONTROL=ignoreboth

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar
# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
  xterm-color) color_prompt=yes;;
esac

# We define this here so that it is available for use in this file
function add_to_path() {
  case ":${PATH:=$1}:" in
    *:"$1":*)  ;;
    *) PATH="$1:$PATH"  ;;
  esac
}

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.aliases ]; then
  source ~/.aliases
fi

if [[ $TERM == xterm ]]; then export TERM=xterm-256color; fi

add_to_path "$HOME/bin"

export GIT_EDITOR=nvim
export EDITOR=nvim
alias vim=nvim

# rbenv setup
add_to_path "$HOME/.rbenv/bin"
if [ -x "$(command -v rbenv)" ]; then
 eval "$(rbenv init -)"
fi

export PATH

if [ -f ~/.bash_functions.sh ]; then
  source ~/.bash_functions.sh
fi

# NOTE: This is probably not a great idea since cargo might change
# how this works and this will break.
if [ -f ~/.cargo/env ]; then
  # source ~/.cargo/env
  add_to_path "$HOME/.cargo/bin"
fi

if [ -f ~/.bashrc.local ]; then
  source ~/.bashrc.local
fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"
